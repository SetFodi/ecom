generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?  // Add name field
  password  String   // In production, hash this!
  carts     Cart[]
  orders    Order[]  // Relation to orders
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Add updatedAt field
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String
  extraImages String?    // JSON string array for additional images
  stock       Int        @default(10)
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[] // Relation to order items
  createdAt   DateTime   @default(now())
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

// New models for orders
model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  total       Float
  status      String      @default("processing") // processing, shipped, delivered, cancelled
  address     String
  city        String
  postalCode  String
  country     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  name      String   // Store name at time of purchase
  price     Float    // Store price at time of purchase
  quantity  Int
}